{"ast":null,"code":"var _jsxFileName = \"/Users/leejeesung/GitHub/flowchart_demo/src/App.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, MiniMap, Controls, Background, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport DatasetNode from './nodes/dataset/DatasetNode.js';\nimport './nodes/dataset/dataset-node.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rfStyle = {\n  backgroundColor: '#1C1C1C'\n};\nconst initialNodes = [{\n  id: 'node-1',\n  type: 'datasetnode',\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: 'node-2',\n  type: 'output',\n  targetPosition: 'top',\n  position: {\n    x: 0,\n    y: 200\n  },\n  data: {\n    label: 'node 2'\n  },\n  sourcePosition: 'right',\n  targetPosition: 'left'\n}, {\n  id: 'node-3',\n  type: 'output',\n  targetPosition: 'top',\n  position: {\n    x: 200,\n    y: 200\n  },\n  data: {\n    label: 'node 3'\n  },\n  sourcePosition: 'right',\n  targetPosition: 'left'\n}];\nconst initialEdges = [{\n  id: 'edge-1',\n  source: 'node-1',\n  target: 'node-2',\n  sourceHandle: 'a'\n}, {\n  id: 'edge-2',\n  source: 'node-1',\n  target: 'node-3',\n  sourceHandle: 'b'\n}];\n\n// we define the nodeTypes outside of the component to prevent re-renderings\n// you could also use useMemo inside the component\nconst nodeTypes = {\n  datasetnode: DatasetNode\n};\nlet nodeId = 0;\nfunction Flow() {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), [setNodes]);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), [setEdges]);\n  const onConnect = useCallback(connection => setEdges(eds => addEdge(connection, eds)), [setEdges]);\n  const reactFlowInstance = useReactFlow();\n  const onClick = useCallback(() => {\n    const id = `${++nodeId}`;\n    const newNode = {\n      id,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      },\n      type: 'datasetnode'\n    };\n    reactFlowInstance.addNodes(newNode);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css?family=JetBrains+Mono\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 800\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        style: rfStyle,\n        children: /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Flow, \"1NzUtJKkHMgiY2CffM1m19A2aQc=\", false, function () {\n  return [useReactFlow];\n});\n_c = Flow;\nexport default Flow;\nvar _c;\n$RefreshReg$(_c, \"Flow\");","map":{"version":3,"names":["useCallback","useState","ReactFlow","addEdge","applyEdgeChanges","applyNodeChanges","MiniMap","Controls","Background","useReactFlow","DatasetNode","rfStyle","backgroundColor","initialNodes","id","type","position","x","y","targetPosition","data","label","sourcePosition","initialEdges","source","target","sourceHandle","nodeTypes","datasetnode","nodeId","Flow","nodes","setNodes","edges","setEdges","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","connection","reactFlowInstance","onClick","newNode","Math","random","addNodes","height"],"sources":["/Users/leejeesung/GitHub/flowchart_demo/src/App.js"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, applyEdgeChanges, applyNodeChanges, MiniMap, Controls, Background, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport DatasetNode from './nodes/dataset/DatasetNode.js';\n\nimport './nodes/dataset/dataset-node.css';\n\nconst rfStyle = {\n  backgroundColor: '#1C1C1C',\n};\n\nconst initialNodes = [\n  { \n    id: 'node-1', \n    type: 'datasetnode', \n    position: { x: 0, y: 0 }\n  },\n  {\n    id: 'node-2',\n    type: 'output',\n    targetPosition: 'top',\n    position: { x: 0, y: 200 },\n    data: { label: 'node 2' },\n    sourcePosition: 'right', \n    targetPosition: 'left'\n  },\n  {\n    id: 'node-3',\n    type: 'output',\n    targetPosition: 'top',\n    position: { x: 200, y: 200 },\n    data: { label: 'node 3' },\n    sourcePosition: 'right', \n    targetPosition: 'left'\n  },\n];\n\nconst initialEdges = [\n  { id: 'edge-1', source: 'node-1', target: 'node-2', sourceHandle: 'a' },\n  { id: 'edge-2', source: 'node-1', target: 'node-3', sourceHandle: 'b' },\n];\n\n// we define the nodeTypes outside of the component to prevent re-renderings\n// you could also use useMemo inside the component\nconst nodeTypes = { datasetnode: DatasetNode };\n\nlet nodeId = 0\n\nfunction Flow() {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    [setNodes]\n  );\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges]\n  );\n  const onConnect = useCallback(\n    (connection) => setEdges((eds) => addEdge(connection, eds)),\n    [setEdges]\n  );\n\n  const reactFlowInstance = useReactFlow();\n  const onClick = useCallback(() => {\n    const id = `${++nodeId}`;\n    const newNode = {\n      id,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500,\n      },\n      type: 'datasetnode'\n    };\n    reactFlowInstance.addNodes(newNode);\n  }, []);\n\n  return (\n    <>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=JetBrains+Mono\" />\n    <div style={{ height: 800 }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n        style={rfStyle}\n      >\n        <Background/>\n      </ReactFlow>\n    </div>\n    </>\n  );\n}\n\nexport default Flow;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}